name: Main Workflow for Foodgram

on:
  push:
    branches:
      - master

jobs:
  run_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0
          pip install -r ./backend/requirements.txt
      - name: Test with flake8
        run: python -m flake8 backend/

  build_and_push_backend_docker_image:
    name: Push Docker image for backend to DockerHub
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  build_and_push_frontend_docker_image:
    name: Push Docker image for frontend to DockerHub
    runs-on: ubuntu-latest
    needs: run_tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  build_and_push_nginx_docker_image:
    name: Push Docker image for Nginx to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./infra/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend_docker_image
      - build_and_push_frontend_docker_image
      - build_and_push_nginx_docker_image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Copy docker-compose.yml via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "foodgram"
      - name: Execute remote SSH commands for deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram
            rm .env
            touch .env
            echo "TOKEN=${{ secrets.TOKEN }}" >> .env
            echo "DEBUG=${{ secrets.DEBUG }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            # Выполняет pull образов с Docker Hub
            sudo docker compose -f docker-compose.production.yml pull
            # Перезапускает все контейнеры в Docker Compose
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            # Выполняет миграции и сбор статики
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/backend_static/. /backend_static/static/

  send_notification:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Deployment of foodgram was successful!
            Commit by: ${{ github.actor }}
            Commit message: ${{ github.event.commits[0].message }}
            Commit link: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
